<?php

    require_once __DIR__ . '/../Repositories/TreinosRepository.php';

    class TreinosService {
        private $repository;

        public function __construct() {
            $this->repository = new TreinosRepository();
        }

        // Valida√ß√µes
        public function validarDadosTreino($data) {
            $errors = [];

            if (empty(trim($data['nome'] ?? ''))) {
                $errors[] = "Nome √© obrigat√≥rio";
            }

            if (empty(trim($data['criadoPor'] ?? ''))) {
                $errors[] = "CriadoPor √© obrigat√≥rio";
            }

            if (empty(trim($data['tipo'] ?? ''))) {
                $errors[] = "Tipo √© obrigat√≥rio";
            }

            $tiposValidos = ['Muscula√ß√£o', 'CrossFit', 'Calistenia', 'Pilates', 'Aquecimento', 'Treino Espec√≠fico', 'Outros'];
            if (!in_array($data['tipo'], $tiposValidos)) {
                $errors[] = "Tipo inv√°lido. Use: " . implode(', ', $tiposValidos);
            }

            if (is_null($data['idAluno'] ?? null) && is_null($data['idPersonal'] ?? null)) {
                $errors[] = "Informe idAluno ou idPersonal";
            }

            // Validar tipo de treino
            $tiposTreinoValidos = ['normal', 'adaptado'];
            $tipoTreino = $data['tipo_treino'] ?? 'normal';
            if (!in_array($tipoTreino, $tiposTreinoValidos)) {
                $errors[] = "Tipo de treino inv√°lido. Use: " . implode(', ', $tiposTreinoValidos);
            }

            return $errors;
        }

        public function validarDadosExercicioTreino($data) {
            $errors = [];

            if (empty($data['idExercicio']) && empty($data['idExercAdaptado'])) {
                $errors[] = "Informe idExercicio ou idExercAdaptado";
            }

            if (empty($data['series']) || $data['series'] <= 0) {
                $errors[] = "S√©ries devem ser maior que zero";
            }

            if (empty($data['repeticoes']) || $data['repeticoes'] <= 0) {
                $errors[] = "Repeti√ß√µes devem ser maior que zero";
            }

            return $errors;
        }

        public function validarCompatibilidadeTreinoExercicio($idTreino, $exercicioData) {
            // Buscar tipo do treino
            $treino = $this->repository->buscarTreinoPorId($idTreino);
            if (!$treino) {
                return "Treino n√£o encontrado";
            }

            $tipoTreino = $treino['tipo_treino'];
            
            // Buscar tipo do exerc√≠cio
            if (empty($exercicioData['idExercicio'])) {
                return "ID do exerc√≠cio n√£o fornecido";
            }
            
            $exercicio = $this->repository->buscarExercicioPorId($exercicioData['idExercicio']);
            if (!$exercicio) {
                return "Exerc√≠cio n√£o encontrado";
            }
            
            $tipoExercicio = $exercicio['tipo_exercicio'] ?? 'normal';

            // Validar compatibilidade
            if ($tipoTreino === 'adaptado' && $tipoExercicio !== 'adaptado') {
                return "Treinos adaptados s√≥ podem conter exerc√≠cios adaptados";
            }

            if ($tipoTreino === 'normal' && $tipoExercicio === 'adaptado') {
                return "Treinos normais s√≥ podem conter exerc√≠cios normais";
            }

            return null; // Sem erros
        }

        // Opera√ß√µes de Treino
        public function criarTreino($data) {
            $errors = $this->validarDadosTreino($data);
            if (!empty($errors)) {
                throw new Exception(implode(', ', $errors));
            }

            $now = date('Y-m-d H:i:s');
            $dadosTreino = [
                'idAluno' => $data['idAluno'] ?? null,
                'idPersonal' => $data['idPersonal'] ?? null,
                'criadoPor' => trim($data['criadoPor']),
                'nome' => trim($data['nome']),
                'tipo' => $data['tipo'],
                'descricao' => $data['descricao'] ?? null,
                'data_criacao' => $now,
                'data_ultima_modificacao' => $now,
                'tipo_treino' => $data['tipo_treino'] ?? 'normal'
            ];

            $idTreino = $this->repository->criarTreino($dadosTreino);
            if (!$idTreino) {
                throw new Exception("Falha ao criar treino no banco de dados");
            }

            return $idTreino;
        }

        public function atualizarTreino($idTreino, $data, $usuario) {
            // Verificar permiss√£o
            if (!$this->repository->verificarPermissaoTreino($idTreino, $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para editar este treino");
            }

            $errors = $this->validarDadosTreino(array_merge(
                $this->repository->buscarTreinoPorId($idTreino),
                $data
            ));
            if (!empty($errors)) {
                throw new Exception(implode(', ', $errors));
            }

            $now = date('Y-m-d H:i:s');
            $dadosAtualizacao = [
                'nome' => trim($data['nome']),
                'tipo' => $data['tipo'],
                'descricao' => $data['descricao'] ?? null,
                'data_ultima_modificacao' => $now,
                'tipo_treino' => $data['tipo_treino'] ?? 'normal'
            ];

            $success = $this->repository->atualizarTreino($idTreino, $dadosAtualizacao);
            if (!$success) {
                throw new Exception("Falha ao atualizar treino");
            }

            return true;
        }

        public function excluirTreino($idTreino, $usuario){
            // Verificar se o treino existe
            $treino = $this->repository->buscarTreinoPorId($idTreino);
            if (!$treino) {
                throw new Exception("Treino n√£o encontrado", 404);
            }

            // Verificar permiss√£o
            if (!$this->repository->verificarPermissaoTreino($idTreino, $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para excluir este treino");
            }

            // Iniciar transa√ß√£o para excluir exerc√≠cios e treino
            $this->repository->beginTransaction();

            try {
                error_log("üóëÔ∏è  Iniciando exclus√£o do treino {$idTreino}...");

                // 1. Primeiro excluir os exerc√≠cios do treino
                $exercicios = $this->repository->buscarExerciciosDoTreino($idTreino);
                error_log("üìä Exerc√≠cios a excluir: " . count($exercicios));
                
                foreach ($exercicios as $exercicio) {
                    $success = $this->repository->removerExercicioDoTreino($exercicio['idTreino_Exercicio']);
                    if (!$success) {
                        throw new Exception("Falha ao excluir exerc√≠cio ID: " . $exercicio['idTreino_Exercicio']);
                    }
                }
                error_log("‚úÖ Exerc√≠cios exclu√≠dos");

                // 2. Agora excluir o treino
                $success = $this->repository->excluirTreino($idTreino);
                if (!$success) {
                    throw new Exception("Falha ao excluir treino do banco de dados");
                }
                error_log("‚úÖ Treino exclu√≠do da tabela treinos");

                $this->repository->commit();
                error_log("üéâ Transa√ß√£o conclu√≠da com sucesso");

                return true;

            } catch (Exception $e) {
                $this->repository->rollBack();
                error_log("‚ùå Rollback realizado devido a erro: " . $e->getMessage());
                throw $e;
            }
        }

        public function desatribuirTreinoComHistorico($idTreino, $usuario){
            // Verificar se o treino existe
            $treino = $this->repository->buscarTreinoPorId($idTreino);
            if (!$treino) {
                throw new Exception("Treino n√£o encontrado", 404);
            }

            // Verificar permiss√£o
            if (!$this->repository->verificarPermissaoTreino($idTreino, $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para desatribuir este treino");
            }

            // Verificar se existem sess√µes/hist√≥rico
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM treino_sessao WHERE idTreino = ?");
            $stmt->execute([$idTreino]);
            $temHistorico = $stmt->fetchColumn() > 0;

            if ($temHistorico) {
                // Se tem hist√≥rico, apenas desvincular o aluno
                return $this->repository->desvincularTreinoDoAluno($idTreino);
            } else {
                // Se n√£o tem hist√≥rico, excluir completamente
                return $this->excluirTreino($idTreino, $usuario);
            }
        }

        private function excluirTreinoHard($idTreino, $usuario) {
            // Exclus√£o completa (apenas se n√£o tiver sess√µes)
            $this->repository->beginTransaction();

            try {
                // Excluir exerc√≠cios relacionados
                $exercicios = $this->repository->buscarExerciciosDoTreino($idTreino);
                foreach ($exercicios as $exercicio) {
                    $success = $this->repository->removerExercicioDoTreino($exercicio['idTreino_Exercicio']);
                    if (!$success) {
                        throw new Exception("Falha ao excluir exerc√≠cios do treino");
                    }
                }

                // Excluir treino
                $success = $this->repository->excluirTreino($idTreino);
                if (!$success) {
                    throw new Exception("Falha ao excluir treino");
                }

                $this->repository->commit();
                return true;

            } catch (Exception $e) {
                $this->repository->rollBack();
                throw $e;
            }
        }

        // Opera√ß√µes de Exerc√≠cios no Treino
        public function adicionarExercicioAoTreino($idTreino, $exercicioData, $usuario) {
            // Verificar permiss√£o
            if (!$this->repository->verificarPermissaoTreino($idTreino, $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para modificar este treino");
            }

            // Validar compatibilidade
            $erroCompatibilidade = $this->validarCompatibilidadeTreinoExercicio($idTreino, $exercicioData);
            if ($erroCompatibilidade) {
                throw new Exception($erroCompatibilidade);
            }

            $errors = $this->validarDadosExercicioTreino($exercicioData);
            if (!empty($errors)) {
                throw new Exception(implode(', ', $errors));
            }

            $now = date('Y-m-d H:i:s');
            
            // CORRE√á√ÉO: Usar apenas idExercicio, sem idExercAdaptado
            $dadosExercicio = [
                'idTreino' => $idTreino,
                'idExercicio' => $exercicioData['idExercicio'],
                'data_criacao' => $now,
                'data_ultima_modificacao' => $now,
                'series' => $exercicioData['series'],
                'repeticoes' => $exercicioData['repeticoes'],
                'carga' => $exercicioData['carga'] ?? null,
                'descanso' => $exercicioData['descanso'] ?? null,
                'ordem' => $exercicioData['ordem'] ?? 0,
                'observacoes' => $exercicioData['observacoes'] ?? null
            ];

            $success = $this->repository->adicionarExercicioAoTreino($dadosExercicio);
            if (!$success) {
                throw new Exception("Falha ao adicionar exerc√≠cio ao treino");
            }

            // Atualizar data de modifica√ß√£o do treino
            $this->repository->atualizarDataModificacaoTreino($idTreino, $now);

            return true;
        }
        public function atualizarExercicioNoTreino($idTreinoExercicio, $data, $usuario) {
            // Buscar exerc√≠cio e verificar permiss√£o
            $exercicio = $this->repository->buscarExercicioTreinoPorId($idTreinoExercicio);
            if (!$exercicio) {
                throw new Exception("Exerc√≠cio no treino n√£o encontrado");
            }

            if (!$this->repository->verificarPermissaoTreino($exercicio['idTreino'], $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para editar este exerc√≠cio");
            }

            $now = date('Y-m-d H:i:s');
            $dadosAtualizacao = [
                'series' => $data['series'] ?? $exercicio['series'],
                'repeticoes' => $data['repeticoes'] ?? $exercicio['repeticoes'],
                'carga' => $data['carga'] ?? $exercicio['carga'],
                'descanso' => $data['descanso'] ?? $exercicio['descanso'],
                'ordem' => $data['ordem'] ?? $exercicio['ordem'],
                'observacoes' => $data['observacoes'] ?? $exercicio['observacoes'],
                'data_ultima_modificacao' => $now
            ];

            $success = $this->repository->atualizarExercicioNoTreino($idTreinoExercicio, $dadosAtualizacao);
            if (!$success) {
                throw new Exception("Falha ao atualizar exerc√≠cio");
            }

            // Atualizar data de modifica√ß√£o do treino
            $this->repository->atualizarDataModificacaoTreino($exercicio['idTreino'], $now);

            return true;
        }

        public function removerExercicioDoTreino($idTreinoExercicio, $usuario) {
            // Buscar exerc√≠cio e verificar permiss√£o
            $exercicio = $this->repository->buscarExercicioTreinoPorId($idTreinoExercicio);
            if (!$exercicio) {
                throw new Exception("Exerc√≠cio n√£o encontrado no treino");
            }

            if (!$this->repository->verificarPermissaoTreino($exercicio['idTreino'], $usuario)) {
                throw new Exception("Voc√™ n√£o tem permiss√£o para remover este exerc√≠cio");
            }

            $success = $this->repository->removerExercicioDoTreino($idTreinoExercicio);
            if (!$success) {
                throw new Exception("Falha ao remover exerc√≠cio");
            }

            // Atualizar data de modifica√ß√£o do treino
            $this->repository->atualizarDataModificacaoTreino($exercicio['idTreino'], date('Y-m-d H:i:s'));

            return true;
        }

        // Listagens
        public function listarTreinosAluno($idAluno) {
            return $this->repository->listarTreinosAluno($idAluno);
        }

        public function listarTreinosPersonal($idPersonal) {
            return $this->repository->listarTreinosPersonal($idPersonal);
        }

        public function listarTreinosAlunoComPersonal($idAluno) {
            return $this->repository->listarTreinosAlunoComPersonal($idAluno);
        }

        public function buscarTreinoCompleto($idTreino, $usuario) {
            $treino = $this->repository->buscarTreinoPorId($idTreino);
            if (!$treino) {
                throw new Exception("Treino n√£o encontrado");
            }

            $exercicios = $this->repository->buscarExerciciosDoTreino($idTreino);
            $treino['exercicios'] = $exercicios;

            return $treino;
        }

        // Opera√ß√µes de V√≠nculo
        public function atribuirTreinoAluno($idTreino, $idAluno, $idPersonal) {
            // Verificar se aluno pertence ao personal
            $aluno = $this->repository->verificarVinculoAlunoPersonal($idAluno, $idPersonal);
            if (!$aluno) {
                throw new Exception("Aluno n√£o encontrado ou n√£o vinculado a voc√™");
            }

            // Buscar treino original
            $treinoOriginal = $this->repository->buscarTreinoPorId($idTreino);
            if (!$treinoOriginal) {
                throw new Exception("Treino n√£o encontrado");
            }

            // Iniciar transa√ß√£o
            $this->repository->beginTransaction();

            try {
                // Duplicar treino
                unset($treinoOriginal['idTreino']);
                $treinoOriginal['idAluno'] = $idAluno;
                $treinoOriginal['data_ultima_modificacao'] = date('Y-m-d H:i:s');

                $novoIdTreino = $this->repository->duplicarTreino($treinoOriginal, $treinoOriginal);
                if (!$novoIdTreino) {
                    throw new Exception("Falha ao duplicar treino");
                }

                // Duplicar exerc√≠cios
                $this->repository->duplicarExerciciosTreino($idTreino, $novoIdTreino);

                $this->repository->commit();
                return $novoIdTreino;

            } catch (Exception $e) {
                $this->repository->rollBack();
                throw $e;
            }
        }

        public function listarTreinosDoAlunoAtribuidos($idPersonal, $idAluno) {
            // Buscar treinos onde idPersonal √© o personal logado E idAluno √© o aluno espec√≠fico
            $stmt = $this->db->prepare("
                SELECT t.* 
                FROM treinos t
                WHERE t.idPersonal = ? AND t.idAluno = ?
                ORDER BY t.data_ultima_modificacao DESC
            ");
            $stmt->execute([$idPersonal, $idAluno]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        }

        public function desvincularAluno($idAluno, $idPersonal, $usuario) {
            // Verificar permiss√£o
            if ($usuario['tipo'] !== 'personal' || $usuario['sub'] != $idPersonal) {
                throw new Exception("Apenas o personal dono do aluno pode desvincular");
            }

            // Verificar v√≠nculo
            $aluno = $this->repository->verificarVinculoAlunoPersonal($idAluno, $idPersonal);
            if (!$aluno) {
                throw new Exception("Aluno n√£o encontrado ou n√£o vinculado a voc√™");
            }

            // Iniciar transa√ß√£o
            $this->repository->beginTransaction();

            try {
                // Buscar e excluir treinos atribu√≠dos
                $treinos = $this->repository->buscarTreinosAtribuidosAluno($idAluno, $idPersonal);
                foreach ($treinos as $treino) {
                    $this->excluirTreino($treino['idTreino'], $usuario);
                }

                // Desvincular aluno
                $success = $this->repository->desvincularAluno($idAluno);
                if (!$success) {
                    throw new Exception("Falha ao desvincular aluno");
                }

                $this->repository->commit();
                return true;

            } catch (Exception $e) {
                $this->repository->rollBack();
                throw $e;
            }
        }

        public function criarSessao($idTreino, $usuario) {
            $data = [
                'idTreino' => $idTreino,
                'idUsuario' => $usuario['sub'],
                'tipo_usuario' => $usuario['tipo'],
                'progresso_json' => ['exIndex' => 0, 'serieAtual' => 1, 'exercicios_concluidos' => []]
            ];
            $idSessao = $this->repository->criarSessaoTreino($data);
            if (!$idSessao) {
                throw new Exception("Falha ao criar sess√£o de treino");
            }
            return $idSessao;
        }

        public function finalizarSessao($idSessao, $progresso, $duracao, $notas = null) {
            $sessao = $this->repository->buscarSessaoPorId($idSessao);
            if (!$sessao) {
                throw new Exception("Sess√£o n√£o encontrada");
            }
            
            // CORRE√á√ÉO: Calcular porcentagem corretamente
            $porcentagem = $this->calcularPorcentagemProgresso($progresso, $sessao['idTreino']);
            
            // CORRE√á√ÉO: Definir status baseado na porcentagem
            $status = ($porcentagem >= 90) ? 'concluido' : 'em_progresso'; // 90% ou mais = conclu√≠do
            
            $data = [
                'status' => $status,
                'progresso_json' => $progresso,
                'duracao_total' => $duracao,
                'notas' => $notas,
                'porcentagem_concluida' => $porcentagem  // CORRE√á√ÉO: Garantir que seja salvo
            ];
            
            $success = $this->repository->atualizarSessaoTreino($idSessao, $data);
            if (!$success) {
                throw new Exception("Falha ao finalizar sess√£o");
            }
            
            // CORRE√á√ÉO: Atualizar tamb√©m a √∫ltima sess√£o do treino
            $this->repository->atualizarUltimaSessaoTreino($sessao['idTreino'], $idSessao);
            
            return true;
        }

        private function calcularPorcentagemProgresso($progresso, $idTreino) {
            try {
                // Buscar exerc√≠cios do treino
                $exercicios = $this->repository->buscarExerciciosDoTreino($idTreino);
                
                if (empty($exercicios)) {
                    return 0;
                }
                
                $totalExercicios = count($exercicios);
                $exIndex = $progresso['exIndex'] ?? 0;
                $serieAtual = $progresso['serieAtual'] ?? 1;
                $exerciciosConcluidos = count($progresso['exercicios_concluidos'] ?? []);
                
                // CORRE√á√ÉO: Se todos os exerc√≠cios est√£o conclu√≠dos, √© 100%
                if ($exerciciosConcluidos >= $totalExercicios) {
                    return 100;
                }
                
                // CORRE√á√ÉO: Se est√° no √∫ltimo exerc√≠cio e na √∫ltima s√©rie, √© 100%
                if ($exIndex >= $totalExercicios) {
                    return 100;
                }
                
                // Progresso por exerc√≠cios conclu√≠dos
                $progressoExercicios = ($exerciciosConcluidos / $totalExercicios) * 100;
                
                // Progresso dentro do exerc√≠cio atual
                $progressoNoExercicioAtual = 0;
                if ($exIndex < $totalExercicios && $exIndex >= 0) {
                    $exercicioAtual = $exercicios[$exIndex];
                    $seriesTotais = $exercicioAtual['series'] ?? 1;
                    
                    if ($seriesTotais > 0) {
                        // CORRE√á√ÉO: s√©rieAtual - 1 porque come√ßamos na s√©rie 1
                        $progressoNoExercicioAtual = (($serieAtual - 1) / $seriesTotais) * 100;
                    }
                }
                
                // CORRE√á√ÉO: C√°lculo mais preciso
                // Peso maior para exerc√≠cios conclu√≠dos, menor para progresso dentro do exerc√≠cio
                if ($exerciciosConcluidos > 0) {
                    $porcentagemTotal = $progressoExercicios + ($progressoNoExercicioAtual * 0.3);
                } else {
                    $porcentagemTotal = $progressoNoExercicioAtual;
                }
                
                // CORRE√á√ÉO: Garantir que n√£o passe de 100% e arredondar
                return min(round($porcentagemTotal), 100);
                
            } catch (Exception $e) {
                error_log("Erro ao calcular porcentagem: " . $e->getMessage());
                return 0;
            }
        }

        public function getHistoricoTreinos($usuario, $dias = 30) {
            return $this->repository->buscarHistoricoTreinos($usuario['sub'], $usuario['tipo'], $dias);
        }

        public function getSessaoParaRetomar($idSessao) {
            try {
                error_log("Buscando sess√£o: " . $idSessao);
        
                $sessao = $this->repository->buscarSessaoPorId($idSessao);
                error_log("Sess√£o encontrada: " . json_encode($sessao));
                
                if (!$sessao) {
                    throw new Exception("Sess√£o n√£o encontrada");
                }
                
                // Buscar treino
                $treino = $this->repository->buscarTreinoPorId($sessao['idTreino']);
                error_log("Treino encontrado: " . json_encode($treino));
                
                if (!$treino) {
                    throw new Exception("Treino n√£o encontrado");
                }
                
                // Buscar exerc√≠cios
                $exercicios = $this->repository->buscarExerciciosDoTreino($sessao['idTreino']);
                error_log("Exerc√≠cios encontrados: " . count($exercicios));
                
                $treino['exercicios'] = $exercicios;
                
                // Processar progresso
                $progresso = json_decode($sessao['progresso_json'], true) ?? [
                    'exIndex' => 0, 
                    'serieAtual' => 1, 
                    'exercicios_concluidos' => []
                ];
                
                return [
                    'sessao' => $sessao,
                    'treino' => $treino,
                    'progresso' => $progresso
                ];
                
            } catch (Exception $e) {
                error_log("Erro em getSessaoParaRetomar: " . $e->getMessage());
                throw $e;
            }
        }
    }

?>